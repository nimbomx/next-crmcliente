{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ernestohernandez/Nimbo/CRM/crmcliente/components/pedidos/AsignarCliente.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query obtenerClientesVendedor {\\n        obtenerClientesVendedor {\\n            id\\n            nombre\\n            apellido\\n            empresa\\n            email\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport Select from 'react-select';\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\nvar OBTENER_CLIENTES_USUARIO = gql(_templateObject());\n\nvar AsignarCliente = function AsignarCliente() {\n  var _useState = useState([]),\n      cliente = _useState[0],\n      setCliente = _useState[1]; // Context de pedidos\n\n\n  var pedidoContext = useContext(PedidoContext);\n  var agregarCliente = pedidoContext.agregarCliente; // Consultar la base de datos\n\n  var _useQuery = useQuery(OBTENER_CLIENTES_USUARIO),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error; // console.log(data)\n  // console.log(loading)\n  // console.log(error)\n\n\n  useEffect(function () {\n    agregarCliente(cliente);\n  }, [cliente]);\n\n  var seleccionarCliente = function seleccionarCliente(clientes) {\n    setCliente(clientes);\n  }; // Resultados de la consulta\n\n\n  if (loading) return null;\n  var obtenerClientesVendedor = data.obtenerClientesVendedor;\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"1.- Asigna un Cliente al pedido\"), __jsx(Select, {\n    className: \"mt-3\",\n    options: obtenerClientesVendedor,\n    onChange: function onChange(opcion) {\n      return seleccionarCliente(opcion);\n    },\n    getOptionValue: function getOptionValue(opciones) {\n      return opciones.id;\n    },\n    getOptionLabel: function getOptionLabel(opciones) {\n      return opciones.nombre;\n    },\n    placeholder: \"Busque o Seleccione el Cliente\",\n    noOptionsMessage: function noOptionsMessage() {\n      return \"No hay resultados\";\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AsignarCliente;","map":{"version":3,"sources":["/Users/ernestohernandez/Nimbo/CRM/crmcliente/components/pedidos/AsignarCliente.js"],"names":["React","useState","useEffect","useContext","Select","gql","useQuery","PedidoContext","OBTENER_CLIENTES_USUARIO","AsignarCliente","cliente","setCliente","pedidoContext","agregarCliente","data","loading","error","seleccionarCliente","clientes","obtenerClientesVendedor","opcion","opciones","id","nombre"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA,IAAMC,wBAAwB,GAAGH,GAAH,mBAA9B;;AAYA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,kBAEOR,QAAQ,CAAC,EAAD,CAFf;AAAA,MAEjBS,OAFiB;AAAA,MAERC,UAFQ,iBAIzB;;;AACA,MAAMC,aAAa,GAAGT,UAAU,CAACI,aAAD,CAAhC;AALyB,MAMjBM,cANiB,GAMCD,aAND,CAMjBC,cANiB,EASzB;;AATyB,kBAUQP,QAAQ,CAACE,wBAAD,CAVhB;AAAA,MAUjBM,IAViB,aAUjBA,IAViB;AAAA,MAUXC,OAVW,aAUXA,OAVW;AAAA,MAUFC,KAVE,aAUFA,KAVE,EAYzB;AACA;AACA;;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,cAAc,CAACH,OAAD,CAAd;AACH,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACnCP,IAAAA,UAAU,CAACO,QAAD,CAAV;AACH,GAFD,CApByB,CAwBzB;;;AACA,MAAGH,OAAH,EAAY,OAAO,IAAP;AAzBa,MA2BjBI,uBA3BiB,GA2BWL,IA3BX,CA2BjBK,uBA3BiB;AA6BzB,SAEI,4BACI;AAAG,IAAA,SAAS,EAAC,oFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADJ,EAEI,MAAC,MAAD;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,OAAO,EAAGA,uBAFd;AAGI,IAAA,QAAQ,EAAG,kBAAAC,MAAM;AAAA,aAAIH,kBAAkB,CAACG,MAAD,CAAtB;AAAA,KAHrB;AAII,IAAA,cAAc,EAAG,wBAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,EAAb;AAAA,KAJ7B;AAKI,IAAA,cAAc,EAAG,wBAAAD,QAAQ;AAAA,aAAIA,QAAQ,CAACE,MAAb;AAAA,KAL7B;AAMI,IAAA,WAAW,EAAC,gCANhB;AAOI,IAAA,gBAAgB,EAAE;AAAA,aAAM,mBAAN;AAAA,KAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ;AAgBH,CA7CD;;AA+CA,eAAed,cAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport Select from 'react-select'\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\n\nconst OBTENER_CLIENTES_USUARIO = gql`\n    query obtenerClientesVendedor {\n        obtenerClientesVendedor {\n            id\n            nombre\n            apellido\n            empresa\n            email\n        }\n    }\n`;\n\nconst AsignarCliente = () => {\n\n    const [ cliente, setCliente ] = useState([]);\n\n    // Context de pedidos\n    const pedidoContext = useContext(PedidoContext);\n    const { agregarCliente} = pedidoContext;\n    \n\n    // Consultar la base de datos\n    const { data, loading, error } = useQuery(OBTENER_CLIENTES_USUARIO);\n\n    // console.log(data)\n    // console.log(loading)\n    // console.log(error)\n\n    useEffect(() => {\n        agregarCliente(cliente);\n    }, [cliente])\n\n    const seleccionarCliente = clientes => {\n        setCliente(clientes);\n    }\n\n    // Resultados de la consulta\n    if(loading) return null;\n\n    const { obtenerClientesVendedor } = data;\n\n    return ( \n\n        <>\n            <p className=\"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\">1.- Asigna un Cliente al pedido</p>\n            <Select\n                className=\"mt-3\"\n                options={ obtenerClientesVendedor }\n                onChange={ opcion => seleccionarCliente(opcion) }\n                getOptionValue={ opciones => opciones.id }\n                getOptionLabel={ opciones => opciones.nombre }\n                placeholder=\"Busque o Seleccione el Cliente\"\n                noOptionsMessage={() => \"No hay resultados\"}\n            />\n\n        </>\n     );\n}\n \nexport default AsignarCliente;"]},"metadata":{},"sourceType":"module"}