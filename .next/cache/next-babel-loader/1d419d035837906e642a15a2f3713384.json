{"ast":null,"code":"var _jsxFileName = \"/Users/ernestohernandez/Nimbo/CRM/crmcliente/components/pedidos/AsignarProductos.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport Select from 'react-select';\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\nconst OBTENER_PRODUCTOS = gql`\n    query obtenerProductos {\n        obtenerProductos {\n            id\n            nombre\n            precio\n            existencia\n        }\n    }\n`;\n\nconst AsignarProductos = () => {\n  // state local del componente\n  const {\n    0: productos,\n    1: setProductos\n  } = useState([]); // Context de pedidos\n\n  const pedidoContext = useContext(PedidoContext);\n  const {\n    agregarProducto\n  } = pedidoContext; // consulta a la base de datos\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(OBTENER_PRODUCTOS);\n  useEffect(() => {\n    // TODO : Función para pasar a PedidoState.js\n    agregarProducto(productos);\n  }, [productos]);\n\n  const seleccionarProducto = producto => {\n    setProductos(producto);\n  };\n\n  if (loading) return null;\n  const {\n    obtenerProductos\n  } = data;\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"2.- Selecciona o busca los productos\"), __jsx(Select, {\n    className: \"mt-3\",\n    options: obtenerProductos,\n    onChange: opcion => seleccionarProducto(opcion),\n    isMulti: true,\n    getOptionValue: opciones => opciones.id,\n    getOptionLabel: opciones => `${opciones.nombre} - ${opciones.existencia} Disponibles`,\n    placeholder: \"Busque o Seleccione el Producto\",\n    noOptionsMessage: () => \"No hay resultados\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AsignarProductos;","map":{"version":3,"sources":["/Users/ernestohernandez/Nimbo/CRM/crmcliente/components/pedidos/AsignarProductos.js"],"names":["React","useEffect","useState","useContext","Select","gql","useQuery","PedidoContext","OBTENER_PRODUCTOS","AsignarProductos","productos","setProductos","pedidoContext","agregarProducto","data","loading","error","seleccionarProducto","producto","obtenerProductos","opcion","opciones","id","nombre","existencia"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAGA,MAAMC,iBAAiB,GAAGH,GAAI;;;;;;;;;CAA9B;;AAYA,MAAMI,gBAAgB,GAAG,MAAM;AAE3B;AACA,QAAM;AAAA,OAAEC,SAAF;AAAA,OAAaC;AAAb,MAA8BT,QAAQ,CAAC,EAAD,CAA5C,CAH2B,CAK3B;;AACA,QAAMU,aAAa,GAAGT,UAAU,CAACI,aAAD,CAAhC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAsBD,aAA5B,CAP2B,CAU3B;;AACA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BV,QAAQ,CAACE,iBAAD,CAAzC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAY,IAAAA,eAAe,CAACH,SAAD,CAAf;AACH,GAHQ,EAGN,CAACA,SAAD,CAHM,CAAT;;AAKA,QAAMO,mBAAmB,GAAGC,QAAQ,IAAI;AACpCP,IAAAA,YAAY,CAACO,QAAD,CAAZ;AACH,GAFD;;AAIA,MAAGH,OAAH,EAAY,OAAO,IAAP;AACZ,QAAM;AAAEI,IAAAA;AAAF,MAAuBL,IAA7B;AAEA,SACI,4BACI;AAAG,IAAA,SAAS,EAAC,oFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADJ,EAEI,MAAC,MAAD;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,OAAO,EAAGK,gBAFd;AAGI,IAAA,QAAQ,EAAGC,MAAM,IAAIH,mBAAmB,CAACG,MAAD,CAH5C;AAII,IAAA,OAAO,EAAE,IAJb;AAKI,IAAA,cAAc,EAAGC,QAAQ,IAAIA,QAAQ,CAACC,EAL1C;AAMI,IAAA,cAAc,EAAGD,QAAQ,IAAK,GAAEA,QAAQ,CAACE,MAAO,MAAKF,QAAQ,CAACG,UAAW,cAN7E;AAOI,IAAA,WAAW,EAAC,iCAPhB;AAQI,IAAA,gBAAgB,EAAE,MAAM,mBAR5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAgBH,CAzCD;;AA2CA,eAAef,gBAAf","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport Select from 'react-select';\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\n\n\nconst OBTENER_PRODUCTOS = gql`\n    query obtenerProductos {\n        obtenerProductos {\n            id\n            nombre\n            precio\n            existencia\n        }\n    }\n`;\n\n\nconst AsignarProductos = () => {\n\n    // state local del componente\n    const [ productos, setProductos ] = useState([]);\n\n    // Context de pedidos\n    const pedidoContext = useContext(PedidoContext);\n    const { agregarProducto } = pedidoContext;\n\n\n    // consulta a la base de datos\n    const { data, loading, error } = useQuery(OBTENER_PRODUCTOS);\n\n    useEffect(() => {\n        // TODO : Función para pasar a PedidoState.js\n        agregarProducto(productos);\n    }, [productos])\n\n    const seleccionarProducto = producto => {\n        setProductos(producto)\n    }\n\n    if(loading) return null;\n    const { obtenerProductos } = data;\n\n    return ( \n        <>\n            <p className=\"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\">2.- Selecciona o busca los productos</p>\n            <Select\n                className=\"mt-3\"\n                options={ obtenerProductos }\n                onChange={ opcion => seleccionarProducto(opcion) }\n                isMulti={true}\n                getOptionValue={ opciones => opciones.id }\n                getOptionLabel={ opciones => `${opciones.nombre} - ${opciones.existencia} Disponibles` }\n                placeholder=\"Busque o Seleccione el Producto\"\n                noOptionsMessage={() => \"No hay resultados\"}\n            />\n\n        </>\n     );\n}\n \nexport default AsignarProductos;"]},"metadata":{},"sourceType":"module"}