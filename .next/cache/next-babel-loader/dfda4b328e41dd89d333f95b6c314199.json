{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ernestohernandez/Nimbo/CRM/crmcliente/components/pedidos/AsignarProductos.js\";\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query obtenerProductos {\\n        obtenerProductos {\\n            id\\n            nombre\\n            precio\\n            existencia\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport Select from 'react-select';\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\nvar OBTENER_PRODUCTOS = gql(_templateObject());\n\nvar AsignarProductos = function AsignarProductos() {\n  // state local del componente\n  var _useState = useState([]),\n      productos = _useState[0],\n      setProductos = _useState[1]; // Context de pedidos\n\n\n  var pedidoContext = useContext(PedidoContext);\n  var agregarProducto = pedidoContext.agregarProducto; // consulta a la base de datos\n\n  var _useQuery = useQuery(OBTENER_PRODUCTOS),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  useEffect(function () {\n    // TODO : Función para pasar a PedidoState.js\n    agregarProducto(productos);\n  }, [productos]);\n\n  var seleccionarProducto = function seleccionarProducto(producto) {\n    setProductos(producto);\n  };\n\n  if (loading) return null;\n  var obtenerProductos = data.obtenerProductos;\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"2.- Selecciona o busca los productos\"), __jsx(Select, {\n    className: \"mt-3\",\n    options: obtenerProductos,\n    onChange: function onChange(opcion) {\n      return seleccionarProducto(opcion);\n    },\n    isMulti: true,\n    getOptionValue: function getOptionValue(opciones) {\n      return opciones.id;\n    },\n    getOptionLabel: function getOptionLabel(opciones) {\n      return \"\".concat(opciones.nombre, \" - \").concat(opciones.existencia, \" Disponibles\");\n    },\n    placeholder: \"Busque o Seleccione el Producto\",\n    noOptionsMessage: function noOptionsMessage() {\n      return \"No hay resultados\";\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AsignarProductos;","map":{"version":3,"sources":["/Users/ernestohernandez/Nimbo/CRM/crmcliente/components/pedidos/AsignarProductos.js"],"names":["React","useEffect","useState","useContext","Select","gql","useQuery","PedidoContext","OBTENER_PRODUCTOS","AsignarProductos","productos","setProductos","pedidoContext","agregarProducto","data","loading","error","seleccionarProducto","producto","obtenerProductos","opcion","opciones","id","nombre","existencia"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAGA,IAAMC,iBAAiB,GAAGH,GAAH,mBAAvB;;AAYA,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAE3B;AAF2B,kBAGSP,QAAQ,CAAC,EAAD,CAHjB;AAAA,MAGnBQ,SAHmB;AAAA,MAGRC,YAHQ,iBAK3B;;;AACA,MAAMC,aAAa,GAAGT,UAAU,CAACI,aAAD,CAAhC;AAN2B,MAOnBM,eAPmB,GAOCD,aAPD,CAOnBC,eAPmB,EAU3B;;AAV2B,kBAWMP,QAAQ,CAACE,iBAAD,CAXd;AAAA,MAWnBM,IAXmB,aAWnBA,IAXmB;AAAA,MAWbC,OAXa,aAWbA,OAXa;AAAA,MAWJC,KAXI,aAWJA,KAXI;;AAa3Bf,EAAAA,SAAS,CAAC,YAAM;AACZ;AACAY,IAAAA,eAAe,CAACH,SAAD,CAAf;AACH,GAHQ,EAGN,CAACA,SAAD,CAHM,CAAT;;AAKA,MAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,QAAQ,EAAI;AACpCP,IAAAA,YAAY,CAACO,QAAD,CAAZ;AACH,GAFD;;AAIA,MAAGH,OAAH,EAAY,OAAO,IAAP;AAtBe,MAuBnBI,gBAvBmB,GAuBEL,IAvBF,CAuBnBK,gBAvBmB;AAyB3B,SACI,4BACI;AAAG,IAAA,SAAS,EAAC,oFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADJ,EAEI,MAAC,MAAD;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,OAAO,EAAGA,gBAFd;AAGI,IAAA,QAAQ,EAAG,kBAAAC,MAAM;AAAA,aAAIH,mBAAmB,CAACG,MAAD,CAAvB;AAAA,KAHrB;AAII,IAAA,OAAO,EAAE,IAJb;AAKI,IAAA,cAAc,EAAG,wBAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,EAAb;AAAA,KAL7B;AAMI,IAAA,cAAc,EAAG,wBAAAD,QAAQ;AAAA,uBAAOA,QAAQ,CAACE,MAAhB,gBAA4BF,QAAQ,CAACG,UAArC;AAAA,KAN7B;AAOI,IAAA,WAAW,EAAC,iCAPhB;AAQI,IAAA,gBAAgB,EAAE;AAAA,aAAM,mBAAN;AAAA,KARtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAgBH,CAzCD;;AA2CA,eAAef,gBAAf","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport Select from 'react-select';\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\n\n\nconst OBTENER_PRODUCTOS = gql`\n    query obtenerProductos {\n        obtenerProductos {\n            id\n            nombre\n            precio\n            existencia\n        }\n    }\n`;\n\n\nconst AsignarProductos = () => {\n\n    // state local del componente\n    const [ productos, setProductos ] = useState([]);\n\n    // Context de pedidos\n    const pedidoContext = useContext(PedidoContext);\n    const { agregarProducto } = pedidoContext;\n\n\n    // consulta a la base de datos\n    const { data, loading, error } = useQuery(OBTENER_PRODUCTOS);\n\n    useEffect(() => {\n        // TODO : Función para pasar a PedidoState.js\n        agregarProducto(productos);\n    }, [productos])\n\n    const seleccionarProducto = producto => {\n        setProductos(producto)\n    }\n\n    if(loading) return null;\n    const { obtenerProductos } = data;\n\n    return ( \n        <>\n            <p className=\"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\">2.- Selecciona o busca los productos</p>\n            <Select\n                className=\"mt-3\"\n                options={ obtenerProductos }\n                onChange={ opcion => seleccionarProducto(opcion) }\n                isMulti={true}\n                getOptionValue={ opciones => opciones.id }\n                getOptionLabel={ opciones => `${opciones.nombre} - ${opciones.existencia} Disponibles` }\n                placeholder=\"Busque o Seleccione el Producto\"\n                noOptionsMessage={() => \"No hay resultados\"}\n            />\n\n        </>\n     );\n}\n \nexport default AsignarProductos;"]},"metadata":{},"sourceType":"module"}